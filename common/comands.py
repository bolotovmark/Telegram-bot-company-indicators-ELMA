from aiogram import Dispatcher, types
from common.states.none_auth import NoneAuth
from common.states.access_states import StartMenu, PanelAccessManagement
from db.methods import db_exists_user
from elma.elma import elma
from common.keyboards.static import kb_start_menu, kb_access_management_menu


async def start(message: types.Message):
    user = await db_exists_user(message.from_user.id)
    if user:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {user[1]}!", reply_markup=kb_start_menu)
        await StartMenu.menu.set()
    else:
        await message.answer(
            f"–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            f"\n\n–í–∞—à id –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `{message.from_user.id}`",
            parse_mode="Markdown")


async def revenue(message: types.Message):
    out = elma.elma_requests_QueryTree('7414f89e-b840-4137-8256-3ad2c6213816',
                                       "Name = ‚Äô–í—ã—Ä—É—á–∫–∞, –±–µ–∑ –ù–î–°‚Äô",
                                       "Name,Summa,Kommentariy")

    await message.answer(f"*{out[0].Items[2].Value}*\n\n"
                         f"*–¶–∏—Ñ—Ä–∞:* {out[0].Items[3].Value}\n"
                         f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {out[0].Items[4].Value}", parse_mode='Markdown')


async def resource_plan(message: types.Message):
    out = elma.elma_requests_QueryTree('7414f89e-b840-4137-8256-3ad2c6213816',
                                       "Name = ‚Äô–ü–ª–∞–Ω –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è‚Äô",
                                       "Name,Summa,Kommentariy")

    await message.answer(f"*{out[0].Items[2].Value}*\n\n"
                         f"*–¶–∏—Ñ—Ä–∞:* {out[0].Items[3].Value}\n"
                         f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {out[0].Items[4].Value}", parse_mode='Markdown')


async def cost_effectiveness(message: types.Message):
    out = elma.elma_requests_QueryTree('7414f89e-b840-4137-8256-3ad2c6213816',
                                       "Name = ‚Äô–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å‚Äô",
                                       "Name,Summa,Kommentariy")

    await message.answer(f"*{out[0].Items[2].Value}*\n\n"
                         f"*–¶–∏—Ñ—Ä–∞:* {out[0].Items[3].Value}\n"
                         f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {out[0].Items[4].Value}", parse_mode='Markdown')


async def start_menu(message: types.Message):
    await message.answer("–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å", reply_markup=kb_start_menu)


async def access_management_menu(message: types.Message):
    await PanelAccessManagement.menu.set()
    await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º", reply_markup=kb_access_management_menu)


async def cancel_access_management_menu(message: types.Message):
    await StartMenu.menu.set()
    return await start_menu(message)


def register_handlers_common(dp: Dispatcher):
    dp.register_message_handler(start, state=[None, NoneAuth.start])
    dp.register_message_handler(start, commands=['menu', 'start'])

    dp.register_message_handler(start_menu,
                                lambda message:
                                message.text not in ["üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "ü™™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"],
                                state=StartMenu.menu)

    dp.register_message_handler(access_management_menu,
                                content_types=['text'],
                                text='ü™™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º',
                                state=StartMenu.menu)

    dp.register_message_handler(cancel_access_management_menu,
                                content_types=['text'],
                                text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                state=[PanelAccessManagement])

    dp.register_message_handler(revenue,
                                content_types=['text'],
                                text='–í—ã—Ä—É—á–∫–∞',
                                state=StartMenu.menu)

    dp.register_message_handler(resource_plan,
                                content_types=['text'],
                                text='–ü–ª–∞–Ω –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
                                state=StartMenu.menu)

    dp.register_message_handler(cost_effectiveness,
                                content_types=['text'],
                                text='–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å',
                                state=StartMenu.menu)
